// ft_printf.h
#ifndef FT_PRINTF_H
#define FT_PRINTF_H

#include <stdarg.h>
#include <unistd.h>
#include <stdlib.h>

int	ft_printf(const char *format, ...);
int	ft_putchar(char c);
int	ft_putstr(char *s);
int	ft_putnbr(int n);
int	ft_putnbr_unsigned(unsigned int n);
int	ft_puthex(unsigned int n, char format);
int	ft_putptr(void *ptr);

#endif

// ft_printf.c
#include "ft_printf.h"

int ft_printf(const char *format, ...)
{
    va_list args;
    int     printed;
    int     i;

    va_start(args, format);
    printed = 0;
    i = 0;
    while (format[i])
    {
        if (format[i] == '%' && format[i + 1])
        {
            i++;
            if (format[i] == 'c')
                printed += ft_putchar(va_arg(args, int));
            else if (format[i] == 's')
                printed += ft_putstr(va_arg(args, char *));
            else if (format[i] == 'p')
                printed += ft_putptr(va_arg(args, void *));
            else if (format[i] == 'd' || format[i] == 'i')
                printed += ft_putnbr(va_arg(args, int));
            else if (format[i] == 'u')
                printed += ft_putnbr_unsigned(va_arg(args, unsigned int));
            else if (format[i] == 'x' || format[i] == 'X')
                printed += ft_puthex(va_arg(args, unsigned int), format[i]);
            else if (format[i] == '%')
                printed += ft_putchar('%');
        }
        else
            printed += ft_putchar(format[i]);
        i++;
    }
    va_end(args);
    return (printed);
}

// ft_putchar.c
#include "ft_printf.h"

int ft_putchar(char c)
{
    return (write(1, &c, 1));
}

// ft_putstr.c
#include "ft_printf.h"

int ft_putstr(char *s)
{
    int i;

    if (!s)
        return (ft_putstr("(null)"));
    i = 0;
    while (s[i])
    {
        ft_putchar(s[i]);
        i++;
    }
    return (i);
}

// ft_putnbr.c
#include "ft_printf.h"

int ft_putnbr(int n)
{
    int printed;
    char c;

    printed = 0;
    if (n == -2147483648)
        return (ft_putstr("-2147483648"));
    if (n < 0)
    {
        printed += ft_putchar('-');
        n = -n;
    }
    if (n > 9)
        printed += ft_putnbr(n / 10);
    c = (n % 10) + '0';
    printed += ft_putchar(c);
    return (printed);
}

// ft_putnbr_unsigned.c
#include "ft_printf.h"

int ft_putnbr_unsigned(unsigned int n)
{
    int printed;

    printed = 0;
    if (n > 9)
        printed += ft_putnbr_unsigned(n / 10);
    printed += ft_putchar((n % 10) + '0');
    return (printed);
}

// ft_puthex.c
#include "ft_printf.h"

int ft_puthex(unsigned int n, char format)
{
    int printed;
    char *base;

    base = (format == 'x') ? "0123456789abcdef" : "0123456789ABCDEF";
    printed = 0;
    if (n >= 16)
        printed += ft_puthex(n / 16, format);
    printed += ft_putchar(base[n % 16]);
    return (printed);
}

// ft_putptr.c
#include "ft_printf.h"

int ft_putptr(void *ptr)
{
    unsigned long addr;
    int printed;

    printed = 0;
    addr = (unsigned long)ptr;
    printed += ft_putstr("0x");
    if (addr == 0)
        printed += ft_putchar('0');
    else
        printed += ft_puthex(addr, 'x');
    return (printed);
}

// Makefile
NAME = libftprintf.a
CC = gcc
CFLAGS = -Wall -Wextra -Werror
SRCS = ft_printf.c ft_putchar.c ft_putstr.c ft_putnbr.c ft_putnbr_unsigned.c ft_puthex.c ft_putptr.c
OBJS = $(SRCS:.c=.o)

all: $(NAME)

$(NAME): $(OBJS)
	ar rc $(NAME) $(OBJS)
	runlib $(NAME)

clean:
	rm -f $(OBJS)

fclean: clean
	rm -f $(NAME)

re: fclean all
